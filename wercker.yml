box: floydpink/mono-installbuilder@0.0.4
build:
    steps:
        - script:
            name: create a release, tag and push the new version to the main repo
            code: |-
              DEPLOY_READY_BRANCH=$(head -n 1 branch)
              VERSION=`echo ${DEPLOY_READY_BRANCH} | cut -d'-' -f 2`
              BARE_VERSION=`echo ${VERSION} | cut -c 2-`
              REPO="https://github.com/swara-app/swara-server.git"

              echo "0. Install dependencies and get into our deployment directory"
              sudo apt-get purge nodejs -y
              sudo apt-get update
              sudo apt-get install python-software-properties python g++ make -y
              sudo add-apt-repository ppa:chris-lea/node.js -y
              sudo apt-get update
              sudo apt-get install zip unzip nodejs -y
              sudo npm install -g grunt-cli
              sudo chown -R $USER:$GROUP ~/.npm
              mkdir deployment && cd $_

              echo "1. Download jq"
              wget "http://stedolan.github.io/jq/download/linux64/jq"
              chmod +x jq

              echo "2. Clone the main repo, set up the git configuration and checkout the branch with latest version installers"
              git clone $REPO && cd swara-server
              git config --global user.name "The CI Bot"
              git config --global user.email "swara.app@gmail.com"
              git config credential.helper "store --file=.git/swara-credentials"
              echo "https://${GH_TOKEN}:@github.com" > .git/swara-credentials
              git config push.default tracking
              git checkout $DEPLOY_READY_BRANCH

              echo "3. Copy the installers into the folder deployment/installers"
              mkdir ../installers && cp releases/* ../installers/
              mkdir ../installers/windows && mkdir ../installers/osx && mkdir ../installers/linux
              mv ../installers/*.exe ../installers/windows/
              mv ../installers/*.dmg ../installers/osx/
              mv ../installers/*.deb ../installers/linux/

              echo "4. Check out the master branch and do the version bump"
              git checkout master
              npm install && grunt bump
              git commit -asm "Release ${VERSION} [skip ci]"
              git tag -a ${VERSION} -m "Version ${BARE_VERSION}"
              git push --tags origin master

              echo "5. Zip the installers into the platform-specific installers"
              cd ../installers/
              zip -r linux.zip ./linux
              zip -r osx.zip ./osx
              zip -r windows.zip ./windows

              echo "6. Create a new release & tag on GitHub for this new version"
              echo "6.1 Creating the release and get the upload url"
              RELEASE_JSON_PAYLOAD=$(printf '{ "tag_name": "%s", "name": "%s", "prerelease": true }' $VERSION $VERSION)
              echo "RELEASE_JSON_PAYLOAD: ${RELEASE_JSON_PAYLOAD}"
              UPLOAD_URL=$(curl --user ${GH_TOKEN}:x-oauth-basic --request POST --data "${RELEASE_JSON_PAYLOAD}" https://api.github.com/repos/swara-app/swara-server/releases | ../jq -r '.upload_url')
              echo "6.2 Uploading the release assets"
              echo "UPLOAD_URL: ${UPLOAD_URL}"
              if [[ ${UPLOAD_URL} != */assets{?name} ]]; then exit 100; fi
              UPLOAD_URL_WITH_NAME=$(echo $UPLOAD_URL | sed 's/{?name}$/\?name=/')
              curl --request POST --user ${GH_TOKEN}:x-oauth-basic --header "Content-Type:application/zip" --data-binary @linux.zip "${UPLOAD_URL_WITH_NAME}linux.zip"
              curl --request POST --user ${GH_TOKEN}:x-oauth-basic --header "Content-Type:application/zip" --data-binary @osx.zip "${UPLOAD_URL_WITH_NAME}osx.zip"
              curl --request POST --user ${GH_TOKEN}:x-oauth-basic --header "Content-Type:application/zip" --data-binary @windows.zip "${UPLOAD_URL_WITH_NAME}windows.zip"

              echo "6. Delete the deploy branch on GitHub"
              cd ../swara-server
              git push origin :$DEPLOY_READY_BRANCH
